/**
 * M√≥dulo de gesti√≥n de inventario implementando arquitectura hexagonal.
 * 
 * <p>Este m√≥dulo implementa todas las funcionalidades relacionadas con la gesti√≥n
 * de inventario de productos, incluyendo consultas de stock, transacciones de 
 * entrada y salida, y validaci√≥n de disponibilidad.</p>
 * 
 * <h2>Funcionalidades principales:</h2>
 * <ul>
 *   <li><strong>Consulta de inventario</strong> - B√∫squeda de productos por ID</li>
 *   <li><strong>Transacciones de entrada</strong> - Registro de compras y reposici√≥n de stock</li>
 *   <li><strong>Transacciones de salida</strong> - Registro de ventas con validaci√≥n de stock</li>
 *   <li><strong>Validaci√≥n de productos</strong> - Verificaci√≥n de existencia en cat√°logo</li>
 * </ul>
 * 
 * <h2>Arquitectura del m√≥dulo:</h2>
 * <p>Implementa el patr√≥n de arquitectura hexagonal (Ports and Adapters) con las siguientes capas:</p>
 * 
 * <h3>üì¶ Domain Layer:</h3>
 * <ul>
 *   <li><strong>Ubicaci√≥n:</strong> {@code com.example.inventory.management_inventory.domain}</li>
 *   <li><strong>Prop√≥sito:</strong> Contiene la l√≥gica de negocio pura y las entidades del dominio</li>
 *   <li><strong>Dependencias:</strong> Ninguna (n√∫cleo independiente)</li>
 * </ul>
 * 
 * <h3>üîß Application Layer:</h3>
 * <ul>
 *   <li><strong>Ubicaci√≥n:</strong> {@code com.example.inventory.management_inventory.application}</li>
 *   <li><strong>Prop√≥sito:</strong> Orquestaci√≥n de casos de uso y definici√≥n de puertos</li>
 *   <li><strong>Dependencias:</strong> Solo la capa de dominio</li>
 * </ul>
 * 
 * <h3>üåê Infrastructure Layer:</h3>
 * <ul>
 *   <li><strong>Ubicaci√≥n:</strong> {@code com.example.inventory.management_inventory.infrastructure}</li>
 *   <li><strong>Prop√≥sito:</strong> Adaptadores para frameworks externos y tecnolog√≠as espec√≠ficas</li>
 *   <li><strong>Dependencias:</strong> Capas de aplicaci√≥n y dominio, frameworks externos</li>
 * </ul>
 * 
 * <h2>Flujo de dependencias:</h2>
 * <pre>
 * Infrastructure ‚îÄ‚îÄ‚Üí Application ‚îÄ‚îÄ‚Üí Domain
 *      ‚Üë                              ‚Üë
 *   Adapters                     Core Business
 *   (Spring,                        Logic
 *    JPA, etc.)                  (Pure Java)
 * </pre>
 * 
 * <h2>Principios aplicados:</h2>
 * <ul>
 *   <li><strong>Dependency Inversion</strong> - Las dependencias apuntan hacia adentro</li>
 *   <li><strong>Single Responsibility</strong> - Cada capa tiene una responsabilidad espec√≠fica</li>
 *   <li><strong>Open/Closed</strong> - Extensible mediante nuevos adaptadores</li>
 *   <li><strong>Interface Segregation</strong> - Interfaces espec√≠ficas por funcionalidad</li>
 * </ul>
 * 
 * <h2>Tecnolog√≠as utilizadas:</h2>
 * <ul>
 *   <li><strong>Spring Boot</strong> - Framework de aplicaci√≥n</li>
 *   <li><strong>Spring Data JPA</strong> - Persistencia de datos</li>
 *   <li><strong>Jakarta Persistence</strong> - Especificaci√≥n JPA</li>
 *   <li><strong>Lombok</strong> - Reducci√≥n de c√≥digo boilerplate</li>
 * </ul>
 * 
 * @since 1.0
 */
package com.example.inventory.management_inventory;
